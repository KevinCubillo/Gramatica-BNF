Kevin Cubillo y Fabricio Rios

##############################################################################################################

TERMINALES

<integer> = 0 | -? [1-9][0-9]*
<float> = [0-9]+ \. [0-9]*
<boolean> = “true”  | “false”
<char> = ‘ [a-zA-Z0-9] ‘
<String> = “ [a-zA-Z0-9]* “
<operator> ::= "+" | "-"|"*" | "/" | "%"
<assign> = “=”
<endLine> = “;
<relationalOp> = "==" | "!=" | "<" | ">" | "<=" | ">="
<logicalOp> = "&" | "|" 
<negation> = "!"
<blockStart> = "{"
<blockEnd> = "}"
<parenthesisOpen> = "("
<parenthesisClose> = ")"
<comma> = ","
<comment> = "//" [^\\n]* | "/*" .* "*/"
<separator> ::= "#"
<if>::=”if”
<else>::=”else”
<identifier> ::= [a-zA-Z_][a-zA-Z0-9_]*
<return>::=”return”
<break>::=”break”
<for> ::= “for”
<in> ::= “in”
<range> “range”
<while>::=”while”
<type> ::= “integer” | “float” | “boolean” | “char” | “String”
<text> ::= [a-zA-Z_][a-zA-Z0-9_]*
<linealcomment>::= ”//”
<startcomment>::= ”/*”
<endcomment>::= ”*/”
<read> ::= “read”
<readSymbol> ::= “>>”
<print> ::= “print”
<printSymbol> =:: “<<”
<literal> ::=  <integer> | <float> | <boolean> | <char> | <String>
<switch>::= ”switch”
<case> ::= ”case”
<dots> ::= ”:”
<default> ::= ”default”


##############################################################################################################

OPERATIONS

<aritmeticOperation> ::= <literal> | <identifier> <operator> <literal> | <identifier>
<aritmeticOperations> ::=  <aritmeticOperation> 
<aritmeticOperations> ::= <aritmeticOperations> <operator> <aritmeticOperation>
<aritmeticOperations> ::= <parenthesisOpen> <aritmeticOperations> <operator> <aritmeticOperation> <parenthesisClose>

<conditional_operation> ::= <literal> <logicalOp> | <relationalOp> <literal> 
<conditional_operations> ::= <conditional_operation> 
<conditional_operations> ::=  <conditional_operations> <logicalOp> | <relationalOp> <conditional_operation>
<conditional_operations> ::=  <parenthesisOpen> <conditional_operations> <logicalOp> | <relationalOp> <conditional_operation> <parenthesisClose> 

<operation> ::= <aritmeticOperation> | <conditional_operation>
<operations> ::= <operation>
<operations> ::= <operations> <operator | <logicalOp> | <relationalOp> <operation>
<operations> ::=  <parenthesisOpen> <operations> <operator> | <logicalOp> | <relationalOp> <operation> <parenthesisClose>

##############################################################################################################

STATEMENTS

<decl> ::= <type> <separator> <identifier> <endLine>
<assignment> ::= <identifier> <assign> <literal> | <identifier> | <operations> <endLine>
<decl_and_assignment> ::= <type> <separator> <identifier> <assign> <literal> | <identifier> | <aritmeticOperation> | <conditional_operations>  <endLine>
<readData> ::= <read> <separator> <readSymbol> <identifier> <endLine>
<printdata> ::= <print> <separator> <printSymbol> <identifier> <endLine>
<callFunction> ::= <identifier> <parenthesisOpen> <sendParameters> <endLine>

<statement> ::= <decl> | <assignment> | <decl_and_assignment> | <readData> | <printData> | <callFunction>
<statements>::= <statement>
<statements>::= <statements> <statement>

##############################################################################################################

EXPRESSIONS

<if_expr> ::= <if> <parenthesisOpen> <conditional_expresion> <parenthesisClose> <blockStart> <expressions> <endBlock>
<if_else_expr> ::= <if_expr> <else> <blockStart> <expressions> <endBlock>
<while_expr> ::= <while> <parenthesisOpen> <conditional_expresion> <parenthesisClose> <blockStart> <expressions> <endBlock>
<while_else_expr> ::= <while_expr> <else> <blockStart> <expressions> <endBlock>
<for_range> ::= <for> identifier <in> <range> <parenthesisOpen> <int> <comma> <int> <parenthesisClose> <blockStart> <expressions> <endBlock>
<for_range> ::= <for> identifier <in> <range> <parenthesisOpen> <int> <parenthesisClose> <blockStart> <expressions> <endBlock>

<case_statement> ::= <case> <literal> <dots> <expressions>
<default_statement> ::= <default> <dots> <expressions>
<switch_statement> ::= <switch> <parenthesisOpen> <operations> | <identifier> | <literal> <parenthesisClose> <blockStart> (<case_statement> | <default_statement>)* <endBlock>

<expression> ::= <statements> | <if_expr> | <while_expr> | <for_range> | 
<expressions> ::= <expression> 
<expressions> ::= <expressions> <expression>

#################################################################################################################

PARAMETERS 

<parameter> ::= <type> <separator> <identifier>
<parameters> ::= <parameters> <comma> <parameter>
<parameters> ::= <parameter>
<sendParameter> ::= <identifier> | <literal>
<sendParameters> ::= <sendParameter>
<sendParameters> :: <sendparameters> <comma> <sendparameter>

#################################################################################################################

<function> ::= <type> <separator> <identifier> <parenthesisOpen> <parameters> <parenthesisClose> <blockStart> <expressions> <endBlock>
<functions> ::= <function>
<functions> ::= <functions> <function>

SIMBOLO INICIAL

<program_start> ::= <program>
<program> ::= <functions>
<program> ::= <functions> <declarations>

<comment> ::= <linealcomment> <text> | <startcomment> <text> <endcomment>

